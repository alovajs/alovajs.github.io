"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[9405],{62988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var a=n(85893),r=n(11151),s=n(74866),o=n(85162);const i={title:"XMLHttpRequest Adapter"},l=void 0,d={id:"tutorial/request-adapter/alova-adapter-xhr",title:"XMLHttpRequest Adapter",description:"Install",source:"@site/versioned_docs/version-v2/tutorial/08-request-adapter/02-alova-adapter-xhr.md",sourceDirName:"tutorial/08-request-adapter",slug:"/tutorial/request-adapter/alova-adapter-xhr",permalink:"/v2/tutorial/request-adapter/alova-adapter-xhr",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/versioned_docs/version-v2/tutorial/08-request-adapter/02-alova-adapter-xhr.md",tags:[],version:"v2",sidebarPosition:2,frontMatter:{title:"XMLHttpRequest Adapter"},sidebar:"tutorial",previous:{title:"Mock data",permalink:"/v2/tutorial/request-adapter/alova-mock"},next:{title:"axios adapter",permalink:"/v2/tutorial/request-adapter/alova-adapter-axios"}},u={},c=[{value:"Install",id:"install",level:2},{value:"Instructions",id:"instructions",level:2},{value:"create alova",id:"create-alova",level:3},{value:"Request",id:"request",level:3},{value:"Upload",id:"upload",level:3},{value:"download",id:"download",level:3},{value:"Mock request adapter compatible",id:"mock-request-adapter-compatible",level:2},{value:"Typescript",id:"typescript",level:2},{value:"method configuration",id:"method-configuration",level:3},{value:"Response data",id:"response-data",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(o.Z,{value:"1",label:"npm",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm install @alova/adapter-xhr --save\n"})})}),(0,a.jsx)(o.Z,{value:"2",label:"yarn",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn add @alova/adapter-xhr\n"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"instructions",children:"Instructions"}),"\n",(0,a.jsx)(t.h3,{id:"create-alova",children:"create alova"}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.strong,{children:"xhrRequestAdapter"})," as request adapter for alova."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { createAlova } from 'alova';\nimport { xhrRequestAdapter } from '@alova/adapter-xhr';\n\nconst alovaInst = createAlova({\n  //...\n  requestAdapter: xhrResponseAdapter()\n  //...\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"request",children:"Request"}),"\n",(0,a.jsxs)(t.p,{children:["The XMLHttpRequest adapter provides basic configuration parameters, including ",(0,a.jsx)(t.code,{children:"responseType"}),", ",(0,a.jsx)(t.code,{children:"withCredentials"}),", ",(0,a.jsx)(t.code,{children:"mimeType"}),", ",(0,a.jsx)(t.code,{children:"auth"}),", as follows:"]}),"\n",(0,a.jsxs)(s.Z,{groupId:"framework",children:[(0,a.jsx)(o.Z,{value:"1",label:"vue",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<template>\n  <div v-if="loading">Loading...</div>\n  <div>The request data is: {{ data }}</div>\n</template>\n\n<script setup>\n  const list = () =>\n    alovaInst.Get(\'/list\', {\n      /**\n       * Set the response data type\n       * Can be set to change the response type. Values are: "arraybuffer", "blob", "document", "json" and "text"\n       * defaults to "json"\n       */\n      responseType: \'text\',\n\n      /**\n       * True when credentials are to be included in cross-origin requests. false when they are excluded from cross-origin requests and when cookies are ignored in their responses. Default is false\n       */\n      withCredentials: true,\n\n      /**\n       * Set the mimeType of the response data\n       */\n      mimeType: \'text/plain; charset=x-user-defined\',\n\n      /**\n       * auth means use HTTP Basic authentication and provide credentials.\n       * This will set an `Authorization` header, overriding any existing\n       * Custom headers for `Authorization` set using `headers`.\n       * Note that only HTTP Basic authentication can be configured via this parameter.\n       * For Bearer tokens etc., use the `Authorization` custom header instead.\n       */\n      auth: {\n        username: \'name1\',\n        password: \'123456\'\n      }\n    });\n  const { loading, data } = useRequest(list);\n<\/script>\n'})})}),(0,a.jsx)(o.Z,{value:"2",label:"react",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'const list = () =>\n   alovaInst.Get(\'/list\', {\n     /**\n        * Set the response data type\n        * Can be set to change the response type. Values are: "arraybuffer", "blob", "document", "json" and "text"\n        * defaults to "json"\n        */\n       responseType: \'text\',\n\n       /**\n        * True when credentials are to be included in cross-origin requests. false when they are excluded from cross-origin requests and when cookies are ignored in their responses. Default is false\n        */\n       withCredentials: true,\n\n       /**\n        * Set the mimeType of the response data\n        */\n       mimeType: \'text/plain; charset=x-user-defined\',\n\n       /**\n        * auth means use HTTP Basic authentication and provide credentials.\n        * This will set an `Authorization` header, overriding any existing\n        * Custom headers for `Authorization` set using `headers`.\n        * Note that only HTTP Basic authentication can be configured via this parameter.\n        * For Bearer tokens etc., use the `Authorization` custom header instead.\n        */\n       auth: {\n         username: \'name1\',\n         password: \'123456\'\n       }\n   });\n\nconst App = () => {\n   const { loading, data } = useRequest(list);\n\n   return (\n     { loading ? <div>Loading...</div> : null }\n     <div>The request data is: { JSON.stringify(data) }</div>\n   )\n};\n'})})}),(0,a.jsx)(o.Z,{value:"3",label:"svelte",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<script>\n  const list = () =>\n    alovaInst.Get(\'/list\', {\n      /**\n       * Set the response data type\n       * Can be set to change the response type. Values are: "arraybuffer", "blob", "document", "json" and "text"\n       * defaults to "json"\n       */\n      responseType: \'text\',\n\n      /**\n       * True when credentials are to be included in cross-origin requests. false when they are excluded from cross-origin requests and when cookies are ignored in their responses. Default is false\n       */\n      withCredentials: true,\n\n      /**\n       * Set the mimeType of the response data\n       */\n      mimeType: \'text/plain; charset=x-user-defined\',\n\n      /**\n       * auth means use HTTP Basic authentication and provide credentials.\n       * This will set an `Authorization` header, overriding any existing\n       * Custom headers for `Authorization` set using `headers`.\n       * Note that only HTTP Basic authentication can be configured via this parameter.\n       * For Bearer tokens etc., use the `Authorization` custom header instead.\n       */\n      auth: {\n        username: \'name1\',\n        password: \'123456\'\n      }\n    });\n  const { loading, data } = useRequest(list);\n<\/script>\n\n{#if $loading}\n<div>Loading...</div>\n{/if}\n<div>The request data is: { data }</div>\n'})})})]}),"\n",(0,a.jsx)(t.h3,{id:"upload",children:"Upload"}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:"FormData"})," to upload files, and this ",(0,a.jsx)(t.code,{children:"FormData"})," instance will be sent to the server through ",(0,a.jsx)(t.code,{children:"xhr.send"}),". It will be set ",(0,a.jsx)(t.code,{children:"Content-Type"})," automatically, you don't need to custom it with ",(0,a.jsx)(t.code,{children:"multipart/form-data"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"const uploadFile = imageFile => {\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  return alovaInst.Post('/uploadImg', formData, {\n    // Start upload progress\n    enableUpload: true\n  });\n};\n\nconst {\n  loading,\n  data,\n  uploading,\n  send: sendUpload\n} = useRequest(uploadFile, {\n  immediate: false\n});\n\n// Picture selection event callback\nconst handleImageChoose = ({ target }) => {\n  sendUpload(target.files[0]);\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"download",children:"download"}),"\n",(0,a.jsxs)(t.p,{children:["Point the request url to the file address to download, you can also enable the download progress by setting ",(0,a.jsx)(t.code,{children:"enableDownload"})," to true."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"const downloadFile = () =>\n  alovaInst.Get('/bigImage.jpg', {\n    // Start download progress\n    enableDownload: true,\n    responseType: 'blob'\n  });\n\nconst { loading, data, downloading, send, onSuccess } = useRequest(downloadFile, {\n  immediate: false\n});\nonSuccess(({ data: imageBlob }) => {\n  // download image\n  const anchor = document.createElement('a');\n  anchor.href = URL.createObjectURL(blob);\n  anchor.download = 'image.jpg';\n  anchor.click();\n  URL.revokeObjectURL(anchor.href);\n});\nconst handleImageDownload = () => {\n  send();\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"mock-request-adapter-compatible",children:"Mock request adapter compatible"}),"\n",(0,a.jsxs)(t.p,{children:["When developing applications, we may still need to use simulated requests. Only by default, the response data of ",(0,a.jsx)(t.a,{href:"/v2/tutorial/request-adapter/alova-mock",children:"Mock Request Adapter (@alova/mock)"})," is a ",(0,a.jsx)(t.code,{children:"Response"})," instance, which is compatible with the ",(0,a.jsx)(t.code,{children:"GlobalFetch"})," request adapter by default. When using the XMLHttpRequest adapter, we You need to adapt the response data of the mock request adapter to the XMLHttpRequest adapter. In this case, you need to use the ",(0,a.jsx)(t.code,{children:"xhrMockResponse"})," exported in the ",(0,a.jsx)(t.strong,{children:"@alova/adapter-xhr"})," package as the response adapter."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { defineMock, createAlovaMockAdapter } from '@alova/mock';\nimport { xhrRequestAdapter, xhrMockResponse } from '@alova/adapter-xhr';\n\nconst mocks = defineMock({\n  //...\n});\n\n// mock data request adapter\nexport default createAlovaMockAdapter([mocks], {\n  // After specifying the request adapter, requests that do not match the simulated interface will use this adapter to send requests\n  httpAdapter: xhrRequestAdapter(),\n\n  // Use xhrMockResponse to adapt the simulated data to the XMLHttpRequest adapter\n  onMockResponse: xhrMockResponse\n});\n\nexport const alovaInst = createAlova({\n  //...\n  // Control whether to use the simulated request adapter through environment variables\n  requestAdapter: process.env.NODE_ENV === 'development' ? mockAdapter : xhrRequestAdapter()\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"typescript",children:"Typescript"}),"\n",(0,a.jsx)(t.p,{children:"The XMLHttpRequest request adapter provides complete type adaptation."}),"\n",(0,a.jsx)(t.h3,{id:"method-configuration",children:"method configuration"}),"\n",(0,a.jsxs)(t.p,{children:["When creating a method instance, in addition to the common configuration items in the method, you can also use the configuration items in ",(0,a.jsx)(t.code,{children:"AlovaXHRRequestConfig"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'/**\n * xhr request configuration parameters\n */\ninterface AlovaXHRRequestConfig {\n  /**\n   * Set the response data type.\n   *\n   * Can be set to change the response type. Values are: "arraybuffer", "blob", "document", "json", and "text".\n   * Setting 1: If the current global object is not a Window object, the setting to "document" is ignored.\n   * Setup 2: Throw an "InvalidStateError" DOMException if the state is loading or complete.\n   * Setting 3: Throws an "InvalidAccessError" DOMException if the sync flag is set and the current global object is a Window object.\n   * @default "json"\n   */\n  responseType?: XMLHttpRequestResponseType;\n\n  /**\n   * True when credentials are to be included in cross-origin requests. false when they are excluded from cross-origin requests and when cookies are ignored in their responses. The default is false.\n   * An \'InvalidStateError\' DOMException is thrown if the state is not sent or not opened, or if the send() flag is set.\n   * @default false\n   */\n  withCredentials?: boolean;\n\n  /**\n   * Set the mimeType of the response data\n   */\n  mimeType?: string;\n\n  /**\n   * `auth` indicates that HTTP Basic authentication should be used, and credentials are provided.\n   * This will set an `Authorization` header, overriding any existing\n   * Custom headers for `Authorization` set using `headers`.\n   * Note that only HTTP Basic authentication can be configured via this parameter.\n   * For Bearer tokens etc., use the `Authorization` custom header instead.\n   */\n  auth?: {\n    username: string;\n    password: string;\n  };\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"response-data",children:"Response data"}),"\n",(0,a.jsx)(t.p,{children:"XMLHttpRequest adapter response data is as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"interface AlovaXHRResponseHeaders {\n  [x: string]: any;\n}\ninterface AlovaXHRResponse<T = any> {\n  status: number;\n  statusText: string;\n  data: T;\n  headers: AlovaXHRResponseHeaders;\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>o});n(67294);var a=n(90512);const r={tabItem:"tabItem_Ymn6"};var s=n(85893);function o(e){let{children:t,hidden:n,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(67294),r=n(90512),s=n(12466),o=n(16550),i=n(20469),l=n(91980),d=n(67392),u=n(20812);function c(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[d,c]=m({queryString:n,groupId:r}),[f,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),g=(()=>{const e=d??f;return p({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),v(e)}),[c,v,s]),tabValues:s}}var v=n(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(85893);function b(e){let{className:t,block:n,selectedValue:a,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),r=i[n].value;r!==a&&(d(t),o(r))},c=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:c,onClick:u,...s,className:(0,r.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function y(e){const t=f(e);return(0,x.jsxs)("div",{className:(0,r.Z)("tabs-container",g.tabList),children:[(0,x.jsx)(b,{...t,...e}),(0,x.jsx)(j,{...t,...e})]})}function w(e){const t=(0,v.Z)();return(0,x.jsx)(y,{...e,children:c(e.children)},String(t))}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var a=n(67294);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);