"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[6114],{94968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(85893),a=n(11151);const r={title:"Method Instance"},o=void 0,i={id:"tutorial/getting-started/basic/method",title:"Method Instance",description:"In the previous chapter, we tried to send a request and get the response data. In fact, alovaInstance.Get(...) is not a function that initiates a request, but creates a method instance, which is a PromiseLike instance. You can send a request through the then, catch, finally method or await, just like a Promise object.",source:"@site/docs/tutorial/02-getting-started/03-basic/03-method.md",sourceDirName:"tutorial/02-getting-started/03-basic",slug:"/tutorial/getting-started/basic/method",permalink:"/tutorial/getting-started/basic/method",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/03-basic/03-method.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Method Instance"},sidebar:"tutorial",previous:{title:"Quick Start",permalink:"/tutorial/getting-started/quick-start"},next:{title:"Alova Instance",permalink:"/tutorial/getting-started/basic/alova"}},d={},l=[{value:"Request type",id:"request-type",level:2},{value:"Request parameters",id:"request-parameters",level:2},{value:"URL parameters",id:"url-parameters",level:3},{value:"Request body",id:"request-body",level:3},{value:"Request header",id:"request-header",level:3},{value:"Parameters supported by other request adapters",id:"parameters-supported-by-other-request-adapters",level:3},{value:"Request behavior",id:"request-behavior",level:2},{value:"Timeout",id:"timeout",level:3},{value:"Request sharing",id:"request-sharing",level:3},{value:"Transform response data",id:"transform-response-data",level:3},{value:"Response cache",id:"response-cache",level:3},{value:"Interrupt request",id:"interrupt-request",level:2},{value:"Listen for upload and download progress",id:"listen-for-upload-and-download-progress",level:2}];function c(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["In the previous chapter, we tried to send a request and get the response data. In fact, ",(0,s.jsx)(t.code,{children:"alovaInstance.Get(...)"})," is not a function that initiates a request, but creates a method instance, which is a PromiseLike instance. You can send a request through the ",(0,s.jsx)(t.code,{children:"then, catch, finally"})," method or ",(0,s.jsx)(t.code,{children:"await"}),", just like a Promise object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const userMethodInstance = alovaInstance.Get('/api/user');\n\nuserMethodInstance.then(response => {\n  // ...\n});\n\nuserMethodInstance.catch(error => {\n  // ...\n});\n\nuserMethodInstance.finally(() => {\n  // ...\n});\n\ntry {\n  await userMethodInstance;\n} catch (error) {\n  // ...\n} finally {\n  // ...\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Simple way to write:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const response = await alovaInstance.Get('/api/user');\n"})}),"\n",(0,s.jsx)(t.p,{children:"Each method instance describes the type of each request, request url, request header, request parameters, etc. In addition, you can also define request behavior on the method instance to control how the method handles the request."}),"\n",(0,s.jsx)(t.h2,{id:"request-type",children:"Request type"}),"\n",(0,s.jsx)(t.p,{children:"alova provides 7 request types: GET, POST, PUT, DELETE, HEAD, OPTIONS, and PATCH."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Instance creation function"}),(0,s.jsx)(t.th,{children:"Parameters"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GET"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Get(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"POST"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Post(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PUT"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Put(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DELETE"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Delete(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"HEAD"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Head(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OPTIONS"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Options(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PATCH"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Patch(url[, data[, config]])"})})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Parameter description:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"url"})," is the request path;"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"data"})," is the request body data;"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"config"})," is the request configuration object, which includes the request header, params parameters, request behavior parameters and other configurations;"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["You can also create your own custom method instance by ",(0,s.jsx)(t.code,{children:"alova.Request"}),", which is useful when dynamically specifying the request type."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const method = alovaInstance.Request({\n  url: '/api/users',\n  method: 'GET', // default is GET\n  params: {\n    ID: 1\n  }\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, let's take a look at how to define request parameters, which should be familiar to you."}),"\n",(0,s.jsx)(t.h2,{id:"request-parameters",children:"Request parameters"}),"\n",(0,s.jsx)(t.h3,{id:"url-parameters",children:"URL parameters"}),"\n",(0,s.jsx)(t.p,{children:"Use params to pass in URL parameters, and the params parameters will be concatenated after the url in the form of ?."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Get('/todo/list', {\n  params: {\n    userId: 1\n  }\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"Of course, you can also concatenate directly after the url, and the effect is the same."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Get('/todo/list?userId=1');\n"})}),"\n",(0,s.jsx)(t.h3,{id:"request-body",children:"Request body"}),"\n",(0,s.jsxs)(t.p,{children:["When sending ",(0,s.jsx)(t.strong,{children:"POST, PUT, DELETE, PATCH requests"}),", data can be sent through the request body. At this time, the second parameter passed in is the request body. It is worth noting that the POST request can also pass in the params parameter."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Post(\n  '/todo',\n  // The second parameter is the request body\n  {\n    title: 'test todo',\n    time: '12:00'\n  },\n  // The third parameter is the configuration\n  {\n    params: {\n      userId: 1\n    }\n  }\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"request-header",children:"Request header"}),"\n",(0,s.jsx)(t.p,{children:"Specify the request header through headers."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Get('/user', {\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  }\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"parameters-supported-by-other-request-adapters",children:"Parameters supported by other request adapters"}),"\n",(0,s.jsxs)(t.p,{children:["In addition to request headers, params parameters, etc., it also supports configuring parameters supported by the corresponding request adapter. When using ",(0,s.jsx)(t.code,{children:"alova/fetch"})," as the request adapter of alova, you can configure any parameters supported by ",(0,s.jsx)(t.code,{children:"fetch API"})," on the method instance, and these parameters will be passed to the ",(0,s.jsx)(t.code,{children:"fetch"})," function when requesting."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Get('/todo/list', {\n  // ...\n  // highlight-start\n  credentials: 'same-origin',\n  referrerPolicy: 'no-referrer',\n  mode: 'cors'\n  // highlight-end\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When the above method instance sends a request through ",(0,s.jsx)(t.code,{children:"fetch"}),", it will request with the following parameters."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"fetch('/todo/list', {\n  // ...\n  // highlight-start\n  credentials: 'same-origin',\n  referrerPolicy: 'no-referrer',\n  mode: 'cors'\n  // highlight-end\n});\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["For more details please refer to ",(0,s.jsx)(t.a,{href:"/resource/request-adapter/fetch",children:"fetch adapter"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If you use other request adapters, you can also pass the parameters they support."}),"\n",(0,s.jsx)(t.h2,{id:"request-behavior",children:"Request behavior"}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"/about/RSM",children:"RSM"}),", request behavior is used to describe how the request will be processed."]}),"\n",(0,s.jsx)(t.h3,{id:"timeout",children:"Timeout"}),"\n",(0,s.jsx)(t.p,{children:"Set the request timeout."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Request timeout at request level\nalovaInstance.Get('/todo/list', {\n  // ...\n  // highlight-start\n  timeout: 10000\n  // highlight-end\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"request-sharing",children:"Request sharing"}),"\n",(0,s.jsx)(t.p,{children:"We always encounter this situation. When a request is sent but not responded, the same request is sent again, which causes request waste or repeated submission problems, such as the following three scenarios:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"A component will obtain initialization data when it is created. When a page renders multiple components at the same time, multiple identical requests will be sent at the same time;"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The submit button is not disabled, and the user clicks the submit button multiple times;"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"When the preload page is entered before the preload is completed, multiple identical requests will be sent;"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Prevent repeated requests in react's StrictMode;"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Shared requests are used to solve these problems. It can not only improve the fluency of the application, but also reduce the pressure on the server."}),"\n",(0,s.jsx)(t.mermaid,{value:"flowchart LR\nclassDef response fill:#a8bcff\nR1[request 1] --\x3e S1[send request] --\x3e W1[wait for response]:::response --\x3e RE1[receive data 1]\nR2[same request as request 1] --\x3e W1[wait for response]:::response --\x3e RE2[receive data 1]"}),"\n",(0,s.jsx)(t.p,{children:"Request sharing is enabled by default. If you want to turn off sharing requests on a specific request, you can do this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInst.Get('/todo', {\n  // ...\n  // highlight-start\n  shareRequest: false\n  // highlight-end\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["However, it should be noted that when the request body is ",(0,s.jsx)(t.code,{children:"FormData"}),", it will be considered that you intend to communicate with the server, and in this case, request sharing will not be triggered."]}),"\n",(0,s.jsx)(t.admonition,{title:"How to identify the same request",type:"warning",children:(0,s.jsx)(t.p,{children:"The request method, request url, request header, url parameter, and request body of the method instance are used as unique identifiers. Identical identifiers indicate the same request, rather than comparing the reference address of the method instance."})}),"\n",(0,s.jsx)(t.h3,{id:"transform-response-data",children:"Transform response data"}),"\n",(0,s.jsxs)(t.p,{children:["Sometimes we need to uniformly transform response data. We can set the ",(0,s.jsx)(t.code,{children:"transform"})," function for the method instance to transform the response data into the required structure."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"alovaInstance.Get('/todo/list', {\n  // The function accepts the response data and response header data, and requires the transformed data to be returned.\n  transform(rawData, headers) {\n    return rawData.list.map(item => {\n      return {\n        ...item,\n        statusText: item.done ? 'Completed' : 'In progress'\n      };\n    });\n  }\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"response-cache",children:"Response cache"}),"\n",(0,s.jsx)(t.p,{children:"Response cache allows you to better utilize server-side data multiple times without sending a request to obtain data every time. The GET request will set a memory cache time of 5 minutes by default. If you don't need it, you can turn off the cache for the current request in the following way."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"alovaInstance.Get('/todo/list', {\n  // Set to 0 or null to turn off the default response cache\n  cacheFor: 0\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For details, please refer to ",(0,s.jsx)(t.a,{href:"/tutorial/cache/mode",children:"Response Cache"})]}),"\n",(0,s.jsx)(t.h2,{id:"interrupt-request",children:"Interrupt request"}),"\n",(0,s.jsxs)(t.p,{children:["Call the ",(0,s.jsx)(t.code,{children:"abort"})," of the method instance to interrupt the request."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const userMethod = alovaInstance.Get('/api/user');\nuserMethod.then(res => {\n  // ...\n});\n\nconst handleCancel = () => {\n  // highlight-start\n  userMethod.abort();\n  // highlight-end\n};\n"})}),"\n",(0,s.jsx)(t.h2,{id:"listen-for-upload-and-download-progress",children:"Listen for upload and download progress"}),"\n",(0,s.jsxs)(t.p,{children:["By binding the upload progress event through the ",(0,s.jsx)(t.code,{children:"onUpload"})," of the method instance, and the download progress event through the ",(0,s.jsx)(t.code,{children:"onDownload"}),", it will return the unbinding function."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const uploadMethod = alovaInstance.Post('/todo/uploadfile', formData);\nconst offUploadEvent = uploadMethod.onUpload(event => {\n  console.log('File size:', event.total);\n  console.log('Uploaded:', event.loaded);\n});\n\nuploadMethod.then(res => {\n  // ...\n});\n\n// Unbind upload callback\nconst handleOffEvent = () => {\n  offUploadEvent();\n};\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const downloadMethod = alovaInstance.Get('/todo/downloadfile');\nconst offDownloadEvent = downloadMethod.onDownload(event => {\n  console.log('File size:', event.total);\n  console.log('Downloaded:', event.loaded);\n});\n\ndownloadMethod.then(res => {\n  // ...\n});\n\n// Unbind download callback\nconst handleOffEvent = () => {\n  offDownloadEvent();\n};\n"})}),"\n",(0,s.jsxs)(t.admonition,{type:"warning",children:[(0,s.jsxs)(t.mdxAdmonitionTitle,{children:["Use ",(0,s.jsx)(t.code,{children:"alova/fetch"})," adapter to pay attention to"]}),(0,s.jsxs)(t.p,{children:["Due to the limitation of fetch api, the one provided by alova ",(0,s.jsx)(t.code,{children:"alova/fetch"})," adapter does not support upload progress. If you need upload progress, please use ",(0,s.jsx)(t.a,{href:"/resource/request-adapter/xhr",children:"XMLHttpRequest adapter"})," or ",(0,s.jsx)(t.a,{href:"/resource/request-adapter/axios",children:"axios adapter"}),"."]}),(0,s.jsxs)(t.p,{children:["You can also write your own request adapter, see ",(0,s.jsx)(t.a,{href:"/tutorial/advanced/custom/http-adapter",children:"Writing a request adapter"})," for details."]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Upload/download progress type"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"type Progress = {\n  /** Total amount of data uploaded or downloaded */\n  total: number;\n  /** Completed data */\n  loaded: number;\n};\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var s=n(67294);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);