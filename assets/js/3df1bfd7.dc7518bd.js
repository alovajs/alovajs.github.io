"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[3851],{17470:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var i=a(85893),r=a(11151);const t={title:"Payload Modifier"},o=void 0,s={id:"resource/devtool-plugins/payload-modifier",title:"Payload Modifier",description:"Introduction",source:"@site/docs/resource/04-devtool-plugins/03-payload-modifier.md",sourceDirName:"resource/04-devtool-plugins",slug:"/resource/devtool-plugins/payload-modifier",permalink:"/resource/devtool-plugins/payload-modifier",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/resource/04-devtool-plugins/03-payload-modifier.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Payload Modifier"},sidebar:"resource",previous:{title:"Tag Modifier",permalink:"/resource/devtool-plugins/tag-modifier"},next:{title:"API Filter",permalink:"/resource/devtool-plugins/filter-api"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Type Definitions",id:"type-definitions",level:3},{value:"Example Configurations",id:"example-configurations",level:3},{value:"Modify Parameter Type",id:"modify-parameter-type",level:4},{value:"Modify Nested Parameters",id:"modify-nested-parameters",level:4},{value:"Remove a Parameter",id:"remove-a-parameter",level:4},{value:"Union Types",id:"union-types",level:4},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Dynamically Modify Required Status",id:"dynamically-modify-required-status",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["This plugin is designed to flexibly modify request and response parameters of API interfaces. It supports adding, deleting, and modifying parameter types, as well as adjusting parameter hierarchies via the ",(0,i.jsx)(n.code,{children:"flat"})," feature."]}),"\n",(0,i.jsx)(n.p,{children:"Key features include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Supports modifying parameters in the following scopes: ",(0,i.jsx)(n.code,{children:"params"}),", ",(0,i.jsx)(n.code,{children:"pathParams"}),", ",(0,i.jsx)(n.code,{children:"data"}),", and ",(0,i.jsx)(n.code,{children:"response"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Allows precise control over modification scope using parameter name matching rules (",(0,i.jsx)(n.code,{children:"match"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Enables dynamic modification of parameter types and required status via the ",(0,i.jsx)(n.code,{children:"handler"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="alova.config.js"',children:"import { defineConfig } from '@alova/wormhole';\nimport { payloadModifier } from '@alova/wormhole/plugin';\n\nexport default defineConfig({\n  generator: [\n    {\n      // ...\n      plugin: [\n        // Modify the `userId` field in request parameters\n        payloadModifier([\n          {\n            scope: 'params',\n            match: key => key === 'userId',\n            handler: schema => {\n              return {\n                'attr1?': 'string', // Mark as optional\n                attr2: 'number', // Mark as required\n                attr3: {\n                  // Nested data\n                  innerAttr: ['string', 'number', 'boolean']\n                }\n              };\n            }\n          }\n        ])\n      ]\n    }\n  ]\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,i.jsx)(n.h3,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"/**\n * Scope of parameter modification\n */\ntype ModifierScope = 'params' | 'pathParams' | 'data' | 'response';\n\n/**\n * Primitive types\n */\ntype SchemaPrimitive =\n  | 'number'\n  | 'string'\n  | 'boolean'\n  | 'undefined'\n  | 'null'\n  | 'unknown'\n  | 'any'\n  | 'never';\n\n/**\n * Array type\n */\ntype SchemaArray = {\n  type: 'array';\n  items: Schema;\n};\n\n/**\n * Reference type (optional parameters are marked with `?` at the end of the key)\n */\ntype SchemaReference = {\n  [attr: string]: Schema;\n};\n\n/**\n * Data Schema (supports union types)\n */\ntype Schema =\n  | SchemaPrimitive\n  | SchemaReference\n  | SchemaArray\n  | Array<SchemaPrimitive | SchemaReference | SchemaArray>\n  | { oneOf: Schema[] }\n  | { anyOf: Schema[] }\n  | { allOf: Schema[] };\n\n/**\n * Configuration interface\n */\ninterface Config<T extends Schema> {\n  /**\n   * Scope of application\n   */\n  scope: ModifierScope;\n\n  /**\n   * Matching rule\n   * - string: Parameter name contains this string\n   * - RegExp: Parameter name matches this regex\n   * - function: Custom matching function\n   */\n  match?: string | RegExp | ((key: string) => boolean);\n\n  /**\n   * Parameter modification handler\n   * @param schema Current parameter's Schema\n   * @returns Returns various parameter types:\n   * - Schema: Modified type\n   * - { required: boolean, value: Schema }: Marks the parameter as required/optional\n   * - void | null | undefined: Removes the field\n   */\n  handler: (\n    schema: T\n  ) => Schema | { required: boolean; value: Schema } | void | null | undefined;\n}\n\n/**\n * Plugin function\n */\nfunction payloadModifier(configs: Config<Schema>[]): ApiPlugin;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-configurations",children:"Example Configurations"}),"\n",(0,i.jsx)(n.h4,{id:"modify-parameter-type",children:"Modify Parameter Type"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Change the `age` field in `params` to `number` type\npayloadModifier([\n  {\n    scope: 'params',\n    match: 'age',\n    handler: () => 'number'\n  }\n]);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"modify-nested-parameters",children:"Modify Nested Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Modify nested parameters in `data`\npayloadModifier([\n  {\n    scope: 'data',\n    match: 'user',\n    handler: () => ({\n      name: 'string',\n      age: 'number',\n      address: {\n        city: 'string',\n        zipCode: 'number'\n      }\n    })\n  }\n]);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"remove-a-parameter",children:"Remove a Parameter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Remove the `debugInfo` field from `response`\npayloadModifier([\n  {\n    scope: 'response',\n    match: 'debugInfo',\n    handler: () => undefined\n  }\n]);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"union-types",children:"Union Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Change the `id` field in `pathParams` to `string | number` type\npayloadModifier([\n  {\n    scope: 'pathParams',\n    match: 'id',\n    handler: () => ['string', 'number']\n  }\n]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.h3,{id:"dynamically-modify-required-status",children:"Dynamically Modify Required Status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Mark the `email` field in `data` as required\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>o});var i=a(67294);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);