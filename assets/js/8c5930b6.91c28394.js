"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[5505],{59919:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=r(85893),a=r(11151);const s={title:"Process Shared Adapter"},c=void 0,i={id:"resource/storage-adapter/psc",title:"Process Shared Adapter",description:"Process shared storage adapter allows you to share cache in multi-process environment.",source:"@site/docs/resource/02-storage-adapter/01-psc.md",sourceDirName:"resource/02-storage-adapter",slug:"/resource/storage-adapter/psc",permalink:"/resource/storage-adapter/psc",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/resource/02-storage-adapter/01-psc.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Process Shared Adapter"},sidebar:"resource",previous:{title:"Storage Adapter",permalink:"/resource/storage-adapter/"},next:{title:"File Storage Adapter",permalink:"/resource/storage-adapter/file"}},o={},d=[{value:"Install",id:"install",level:2},{value:"Use in Node.js",id:"use-in-nodejs",level:2},{value:"Sharing Multiple Caches",id:"sharing-multiple-caches",level:3},{value:"Use in Electron",id:"use-in-electron",level:2},{value:"Custom Storage Adapter",id:"custom-storage-adapter",level:2},{value:"Custom SharedAdapter",id:"custom-sharedadapter",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Process shared storage adapter allows you to share cache in multi-process environment."}),"\n",(0,t.jsx)(n.p,{children:"We implemented two adapters that can be used in Node.js and Electron."}),"\n",(0,t.jsx)(n.admonition,{title:"Tips",type:"info",children:(0,t.jsx)(n.p,{children:"Only alova 3.0+ is supported."})}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install alova @alova/psc --save\n# yarn\nyarn add alova @alova/psc\n# npm\npnpm install alova @alova/psc\n"})}),"\n",(0,t.jsx)(n.h2,{id:"use-in-nodejs",children:"Use in Node.js"}),"\n",(0,t.jsxs)(n.p,{children:["In Node.js environment, you can use ",(0,t.jsx)(n.code,{children:"createNodePSCSynchronizer"})," and ",(0,t.jsx)(n.code,{children:"createPSCAdapter"})," to synchronize the cache between child processes."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Set up the synchronizer in the master process:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const cluster = require('cluster');\nconst { createNodePSCSynchronizer } = require('@alova/psc');\n\nif (cluster.isMaster) {\n  // highlight-start\n  // Make sure to call this before creating child processes\n  await createNodePSCSynchronizer();\n  // highlight-end\n} else {\n  // fork worker processes\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Use the adapter in the child process:"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In most cases, you can use it like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { createPSCAdapter, NodeSyncAdapter } = require('@alova/psc');\n\ncreateAlova({\n  // ...\n  l1Cache: createPSCAdapter(NodeSyncAdapter())\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sharing-multiple-caches",children:"Sharing Multiple Caches"}),"\n",(0,t.jsx)(n.p,{children:"Of course, you can share both l1Cache and l2Cache at the same time! Just use the scope option and create different shared storage adapters."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const process = require('node:process');\n\nconst createScopedPSCAdapter = (scope: string) =>\n  createPSCAdapter(\n    NodeSyncAdapter(),\n    // This parameter is used to specify the storage adapter. We will introduce this later\n    undefined,\n    // highlight-start\n    { scope }\n    // highlight-end\n  );\n\ncreateAlova({\n  // ...\n  l1Cache: createScopedPSCAdapter('l1'),\n  l2Cache: createScopedPSCAdapter('l2')\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"use-in-electron",children:"Use in Electron"}),"\n",(0,t.jsxs)(n.p,{children:["In the Electron environment, use ",(0,t.jsx)(n.code,{children:"createElectronPSCSynchronizer"})," and ",(0,t.jsx)(n.code,{children:"createPSCAdapter"})," to synchronize the cache between renderer processes."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Set up the synchronizer in the main process:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// main.js\nimport { createElectronPSCSynchronizer } from '@alova/psc';\nimport { ipcMain } from 'electron';\n\n// Initialize the synchronizer\ncreateElectronPSCSynchronizer(ipcMain);\n\n// ...other codes\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Use the adapter in the renderer process and expose it to the global object:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// payload.js\nimport { createPSCAdapter, ElectronSyncAdapter } from '@alova/psc';\nimport { ipcRenderer, contextBridge } from 'electron';\n\nconst pscAdapter = createPSCAdapter(ElectronSyncAdapter(ipcRenderer));\n\ncontextBridge.exposeInMainWorld('pscAdapter', pscAdapter);\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Use it when creating the Alova instance:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { createAlova } from 'alova';\n\nconst alova = createAlova({\n  // ...\n  // highlight-start\n  l1Cache: window.pscAdapter\n  // highlight-end\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you use TypeScript, don't forget to add the global type declaration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// env.d.ts\ndeclare global {\n  interface Window {\n    // ...\n    // highlight-start\n    pscAdapter: import('@alova/psc').SyncAdapter;\n    // highlight-end\n  }\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"note",type:"warning",children:(0,t.jsxs)(n.p,{children:["When using multiple Alova instances, there is no need to create multiple ",(0,t.jsx)(n.code,{children:"PSCAdapter"})," objects for them. Alova instances are identified by different IDs, so the same channel can be safely reused."]})}),"\n",(0,t.jsx)(n.h2,{id:"custom-storage-adapter",children:"Custom Storage Adapter"}),"\n",(0,t.jsx)(n.p,{children:"By passing the second parameter to createPSCAdapter, you can specify the storage adapter to use."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const pscAdapter = createPSCAdapter(\n  ElectronSyncAdapter(\n    ipcRenderer,\n    // highlight-start\n    // Same as passing to l1Cache in createAlova. Use default implementation if passing undefined.\n    MyStorageAdapter()\n    // highlight-end\n  )\n);\n\ncreateAlova({\n  // ...\n  l1Cache: pscAdapter\n});\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["You can also use ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/lru-cache",children:"lru-cache"})," as a cache adapter."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"custom-sharedadapter",children:"Custom SharedAdapter"}),"\n",(0,t.jsx)(n.p,{children:"If you want to implement your own process shared adapter, you need to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Determine the communication method between processes."}),"\n",(0,t.jsxs)(n.li,{children:["Implement the ",(0,t.jsx)(n.code,{children:"PSCSyncAdapter"})," interface:"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In detail, the first step is to determine the bidirectional communication method between the main process and the child process. For example, in Node.js, alova uses ",(0,t.jsx)(n.code,{children:"node-ipc"})," to implement communication between the main process and the child process. In Electron, we use ",(0,t.jsx)(n.code,{children:"ipcRenderer"})," and ",(0,t.jsx)(n.code,{children:"ipcMain"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Next, implement the ",(0,t.jsx)(n.code,{children:"SyncAdapter"})," interface for both the main process and the child process. Use ",(0,t.jsx)(n.code,{children:"createSyncAdapter"})," for type assistance."]}),"\n",(0,t.jsx)(n.p,{children:"Here is an implementation in Electron:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { createPSCSynchronizer, createSyncAdapter } from '@/sharedCacheAdapter';\nimport type { IpcMain, IpcRenderer } from 'electron';\n\nconst EventName = {\n  TO_MAIN: 'alova-ipc-to-main',\n  TO_CLIENT: 'alova-ipc-to-client'\n} as const;\n\n/**\n * Use this function in payload.js/\n */\nexport function MyElectronSyncAdapter(ipcRenderer: IpcRenderer) {\n  // createSyncAdapter is a helper to implement SyncAdapter. do nothing\n  return createSyncAdapter({\n    send(event) {\n      ipcRenderer.emit(EventName.TO_MAIN, event);\n    },\n    receive(handler) {\n      ipcRenderer.on(EventName.TO_CLIENT, (_, payload) => handler(payload));\n    }\n  });\n}\n\nlet hasSynchronizer = false;\n\n/**\n * Use this function in main process.\n */\nexport function createMyElectronSharedCacheSynchronizer(ipcMain: IpcMain) {\n  if (hasSynchronizer) {\n    return;\n  }\n  hasSynchronizer = true;\n\n  createPSCSynchronizer(\n    createSyncAdapter({\n      send(event) {\n        ipcMain.emit(EventName.TO_CLIENT, event);\n      },\n      receive(handler) {\n        ipcMain.on(EventName.TO_MAIN, (_, payload) => handler(payload));\n      }\n    })\n  );\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"And refer the example above."})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>c});var t=r(67294);const a={},s=t.createContext(a);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);