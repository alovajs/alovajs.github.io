"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[3527],{83035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=n(85893),r=n(11151);const s={title:"Request Rate Limit"},a=void 0,o={id:"tutorial/server/strategy/rate-limit",title:"Request Rate Limit",description:"server hook",source:"@site/docs/tutorial/04-server/01-strategy/03-rate-limit.md",sourceDirName:"tutorial/04-server/01-strategy",slug:"/tutorial/server/strategy/rate-limit",permalink:"/tutorial/server/strategy/rate-limit",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/04-server/01-strategy/03-rate-limit.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Request Rate Limit"},sidebar:"tutorial",previous:{title:"Distributed captcha sending",permalink:"/tutorial/server/strategy/send-captcha"},next:{title:"Response Cache Details",permalink:"/tutorial/cache/"}},l={},d=[{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Custom storage",id:"custom-storage",level:2},{value:"Operation function",id:"operation-function",level:2},{value:"Use times",id:"use-times",level:3},{value:"Rewards",id:"rewards",level:3},{value:"Penalty",id:"penalty",level:3},{value:"Reset",id:"reset",level:3},{value:"Lock",id:"lock",level:3}];function c(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.admonition,{title:"type",type:"info",children:(0,i.jsx)(t.p,{children:"server hook"})}),"\n",(0,i.jsx)(t.p,{children:"Rate limit, a maximum of N requests can be initiated within a certain period of time, such as the following scenario."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"When node is used as the middle layer to request downstream services, under the API with serious resource consumption, it is restricted by IP to avoid consuming downstream server resources"}),"\n",(0,i.jsx)(t.li,{children:"To prevent password brute force cracking, when the downstream server throws login errors repeatedly, it is restricted by IP or username"}),"\n",(0,i.jsx)(t.li,{children:"As a sending limit for sendCaptcha, it prevents users from sending verification codes frequently"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Limit the number of requests within a certain period of time;"}),"\n",(0,i.jsx)(t.li,{children:"Support clusters, single server multi-threading or multi-server;"}),"\n",(0,i.jsx)(t.li,{children:"Support request interval time;"}),"\n",(0,i.jsx)(t.li,{children:"After the reachable rate limit, extend the reset time, such as login lock;"}),"\n",(0,i.jsx)(t.li,{children:"Reward mechanism, penalty mechanism, reset mechanism;"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.h3,{id:"basic-usage",children:"Basic usage"}),"\n",(0,i.jsxs)(t.p,{children:["Create a reusable ",(0,i.jsx)(t.code,{children:"rateLimit"})," function (server hook), and use it to wrap the method instance and return the method instance of the request limit."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const rateLimit = createRateLimiter({\n  /**\n   * Point reset time, in ms\n   * @default 4000\n   */\n  duration: 60 * 1000,\n  /**\n   * Maximum number of points that can be consumed within duration\n   * @default 4\n   */\n  points: 4,\n  /**\n   * Namespace, to prevent conflicts when multiple rateLimits use the same storage\n   */\n  keyPrefix: 'user-rate-limit',\n  /**\n   * Lock duration, in ms, means that when the rate limit is reached, it will be extended by [blockDuration]ms. For example, if the password is incorrect 5 times within 1 hour, it will be locked for 24 hours. This 24 hours is this parameter\n   */\n  blockDuration: 24 * 60 * 60 * 1000,\n\n  /**\n   * Delayed operations will be executed evenly within the duration\n   * @default false\n   */\n  execEvenly: true,\n\n  /**\n   * Minimum delay time (in milliseconds)\n   * @default duration/points\n   */\n  execEvenlyMinDelayMs: 60 * 1000 / 4\n});\n\n// Use rateLimit in request\napp.get('/api/user', (req, res) => {\n  const userResult = await rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n    // Track request limits for different users by key\n    key: req.query.id\n  });\n  // ...\n});\n"})}),"\n",(0,i.jsx)(t.admonition,{title:"Note",type:"warning",children:(0,i.jsx)(t.p,{children:"When a request is limited, an error will be thrown instead of waiting for the request."})}),"\n",(0,i.jsx)(t.h2,{id:"custom-storage",children:"Custom storage"}),"\n",(0,i.jsxs)(t.p,{children:["By default, ",(0,i.jsx)(t.code,{children:"rateLimit"})," uses the target ",(0,i.jsx)(t.code,{children:"method.context.l2Cache"})," as storage, so when the ",(0,i.jsx)(t.code,{children:"l2Cache"})," referenced by the target method meets the project requirements, you don't need any additional settings."]}),"\n",(0,i.jsxs)(t.p,{children:["If not, you can also customize the storage for ",(0,i.jsx)(t.code,{children:"rateLimit"}),", such as ",(0,i.jsx)(t.a,{href:"/resource/storage-adapter/psc",children:"@alova/psc"})," or redis adapter when the cluster is shared."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const { createPSCAdapter, NodeSyncAdapter } = require('@alova/psc');\n\nconst rateLimit = createRateLimiter({\n  // ...\n  store: createPSCAdapter(NodeSyncAdapter())\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"store"})," requires the alova storage adapter, and you can also ",(0,i.jsx)(t.a,{href:"/tutorial/advanced/custom/storage-adapter",children:"customize the storage adapter"})," to meet your personalized needs."]}),"\n",(0,i.jsx)(t.h2,{id:"operation-function",children:"Operation function"}),"\n",(0,i.jsx)(t.h3,{id:"use-times",children:"Use times"}),"\n",(0,i.jsxs)(t.p,{children:["By default, a request will consume one ",(0,i.jsx)(t.code,{children:"point"}),", and you can also consume ",(0,i.jsx)(t.code,{children:"points"})," manually."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const limitedMethod = rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n  key: req.query.id\n});\n\n// Manually consume 1 `points`\nconst rateLimitRes = await limitedMethod.consume(1);\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"rateLimitRes"})," is the status under the current key, the format is as follows."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"interface RateLimitRes {\n  /**\n   * The number of milliseconds before the next operation is completed\n   */\n  msBeforeNext: 250;\n  /**\n   * The number of points remaining in the current duration\n   */\n  remainingPoints: 0;\n  /**\n   * The number of points consumed in the current duration\n   */\n  consumerPoints: 5;\n  /**\n   * The operation is the first operation in the current duration\n   */\n  isFirstInDuration: false;\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"rewards",children:"Rewards"}),"\n",(0,i.jsxs)(t.p,{children:["Rewards refer to operations that increase ",(0,i.jsx)(t.code,{children:"points"}),". You can temporarily increase ",(0,i.jsx)(t.code,{children:"points"})," within a certain period of time."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const limitedMethod = rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n  key: req.query.id\n});\n\n// Reward 1 `points`\nconst rateLimitRes = await limitedMethod.reward(1);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"penalty",children:"Penalty"}),"\n",(0,i.jsxs)(t.p,{children:["Penalty refers to the operation of reducing ",(0,i.jsx)(t.code,{children:"points"}),". You can temporarily reduce ",(0,i.jsx)(t.code,{children:"points"})," for a certain period of time."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const limitedMethod = rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n  key: req.query.id\n});\n\n// Penalty 1 `points`\nconst rateLimitRes = await limitedMethod.penalty(1);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"reset",children:"Reset"}),"\n",(0,i.jsxs)(t.p,{children:["Reset means restarting a new round of ",(0,i.jsx)(t.code,{children:"points"})," consumption."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const limitedMethod = rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n  key: req.query.id\n});\n\n// Reset `points`\nconst rateLimitRes = await limitedMethod.delete();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"lock",children:"Lock"}),"\n",(0,i.jsx)(t.p,{children:"Manually lock for a period of time."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const limitedMethod = rateLimit(alova.Get('/api/user?id=' + req.query.id), {\n  key: req.query.id\n});\n\n// Manually lock for 10 minutes\nconst rateLimitRes = await limitedMethod.block(10 * 60 * 1000);\n"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["This hook is based on ",(0,i.jsx)(t.a,{href:"https://github.com/animir/node-rate-limiter-flexible",children:"node-rate-limiter-flexible"})," and implements most of its functions."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(67294);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);