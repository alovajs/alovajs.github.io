"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[8564],{23346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=t(85893),r=t(11151),s=t(74866),o=t(85162);const i={title:"Server-Sent Events Request"},l=void 0,c={id:"tutorial/client/strategy/use-sse",title:"Server-Sent Events Request",description:"use hook",source:"@site/docs/tutorial/03-client/01-strategy/14-use-sse.md",sourceDirName:"tutorial/03-client/01-strategy",slug:"/tutorial/client/strategy/use-sse",permalink:"/tutorial/client/strategy/use-sse",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/03-client/01-strategy/14-use-sse.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"Server-Sent Events Request"},sidebar:"tutorial",previous:{title:"retriable request",permalink:"/tutorial/client/strategy/use-retriable-request"},next:{title:"Unified upload strategy",permalink:"/tutorial/client/strategy/use-uploader"}},d={},u=[{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Sending Requests",id:"sending-requests",level:2},{value:"Receiving Data",id:"receiving-data",level:2},{value:"Binding Events",id:"binding-events",level:2},{value:"Global Response Interception",id:"global-response-interception",level:2},{value:"Reconnection on Disconnect",id:"reconnection-on-disconnect",level:2},{value:"Set <code>reconnectionTime</code> to 0",id:"set-reconnectiontime-to-0",level:3},{value:"Active Closure by Client",id:"active-closure-by-client",level:3},{value:"Server-Side Declaration",id:"server-side-declaration",level:3},{value:"Type Declarations",id:"type-declarations",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{title:"Strategy Type",type:"info",children:(0,a.jsx)(n.p,{children:"use hook"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Before using extension hooks, ensure you are familiar with the basic usage of alova."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"More concise and user-friendly usage;"}),"\n",(0,a.jsx)(n.li,{children:"Automatic connection management;"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.code,{children:"[3.3.0+]"}),", this strategy is implemented using ",(0,a.jsx)(n.code,{children:"fetch"}),", meaning you can specify headers, methods, and all other ",(0,a.jsx)(n.code,{children:"fetch"}),"-supported parameters for streaming requests. In earlier versions, it was implemented using ",(0,a.jsx)(n.code,{children:"EventSource"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { useSSE } from 'alova/client';\n\nconst postMethodHandler = (value: string) => alova.Post('/api/source', null, {\n  headers: { 'Content-Type': 'application/json' },\n  param: { key: value }\n});\nconst {\n  // Received data, updated with each reception\n  data,\n\n  // Current EventSource instance\n  eventSource,\n\n  // Connection state: 0-connecting, 1-open, 2-closed\n  readyState,\n\n  // Bind connection events\n  onOpen,\n\n  // Bind message reception\n  onMessage,\n\n  // Bind error events\n  onError,\n\n  // Bind custom events\n  on,\n\n  // Connect and send messages\n  send,\n\n  // Close the connection\n  close\n} = useSSE(postMethodHandler, {\n  credentials: 'include',\n  initialData: 'initial-data', // Initial data for `data`\n  // ...other fetch parameters\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"sending-requests",children:"Sending Requests"}),"\n",(0,a.jsxs)(n.p,{children:["By default, requests are not sent automatically. You need to call ",(0,a.jsx)(n.code,{children:"send"})," to initiate the request, or set ",(0,a.jsx)(n.code,{children:"immediate = true"})," to send the request immediately."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data, eventSource, readyState, onMessage, onError, on, send, close } = useSSE(\n  postMethodHandler,\n  {\n    // highlight-start\n    immediate: true\n    // highlight-end\n  }\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Each ",(0,a.jsx)(n.code,{children:"useSSE"})," can only create one connection. This means that when attempting to connect to multiple targets, the previous connection will always be disconnected."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data, eventSource, readyState, onMessage, onError, on, send, close } =\n  useSSE(postMethodHandler);\n\nsend('value1');\n// highlight-start\nsend('value2'); // This will disconnect the previous connection\nsend('value3'); // This will also disconnect the previous connection\n// highlight-end\n"})}),"\n",(0,a.jsx)(n.h2,{id:"receiving-data",children:"Receiving Data"}),"\n",(0,a.jsxs)(n.p,{children:["When data is received, it is automatically assigned to the ",(0,a.jsx)(n.code,{children:"data"})," state. You can bind it directly in the view or listen to it for further actions. All listener binding functions support chaining."]}),"\n",(0,a.jsxs)(s.Z,{groupId:"framework",children:[(0,a.jsx)(o.Z,{value:"1",label:"vue",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<template>\n  <div>\n    <span v-if="readyState === 0">Connecting</span>\n    <span v-else-if="readyState === 1">Connected</span>\n    <span v-else-if="readyState === 2">Disconnected</span>\n  </div>\n  <div>Last received data: {{data}}</div>\n  <ul>\n    <li\n      v-for="item in dataList"\n      :key="item">\n      {{item}}\n    </li>\n  </ul>\n  <button @click="send">Connect</button>\n  <button @click="close">Close</button>\n</template>\n\n<script setup>\n  import { ref } from \'vue\';\n\n  const dataList = ref([]);\n  const { data, readyState, close, send } = useSSE(postMethodHandler)\n    .onMessage(({ data }) => {\n      dataList.value.push(data);\n    })\n    .onError(error => {\n      // ...\n    });\n<\/script>\n'})})}),(0,a.jsx)(o.Z,{value:"2",label:"react",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { useEffect, useState } from 'react';\n\nconst App = () => {\n  const [dataList, setDataList] = useState([]);\n  const { data, readyState, close, send } = useSSE(postMethodHandler)\n    .onMessage(({ data }) => {\n      setDataList(prevList => [...prevList, data]);\n    })\n    .onError(error => {\n      // ...\n    });\n  return (\n    <div>\n      <span>\n        {readyState === 0 ? 'Connecting' : readyState === 1 ? 'Connected' : 'Disconnected'}\n      </span>\n      <div>Last received data: {data}</div>\n      <ul>\n        {dataList.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n      <button onClick={send}>Connect</button>\n      <button onClick={close}>Close</button>\n    </div>\n  );\n};\n"})})}),(0,a.jsx)(o.Z,{value:"3",label:"svelte",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"<script>\n  let dataList = [];\n  const { data, readyState, close, send } = useSSE(postMethodHandler)\n    .onMessage(({ data }) => {\n      dataList.push(newData);\n      data = newData;\n    })\n    .onError(error => {\n      // ...\n    });\n<\/script>\n\n<div>\n  <span\n    >{readyState === 0 ? 'Connecting' : readyState === 1 ? 'Connected' : 'Disconnected'}</span\n  >\n  <div>Last received data: {data}</div>\n  <ul>\n    {#each dataList as item}\n    <li>{item}</li>\n    {/each}\n  </ul>\n  <button on:click=\"{send}\">Connect</button>\n  <button on:click=\"{close}\">Close</button>\n</div>\n"})})}),(0,a.jsx)(o.Z,{value:"4",label:"solid",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { createSignal } from 'solid-js';\n\nconst App = () => {\n  const [dataList, setDataList] = createSignal([]);\n  const { data, readyState, close, send } = useSSE(postMethodHandler)\n    .onMessage(({ data }) => {\n      setDataList(prevList => [...prevList, data]);\n    })\n    .onError(error => {\n      // ...\n    });\n  return (\n    <div>\n      <span>\n        {readyState() === 0 ? 'Connecting' : readyState() === 1 ? 'Connected' : 'Disconnected'}\n      </span>\n      <div>Last received data: {data()}</div>\n      <ul>\n        <For each={dataList()}>{item => <li key={item}>{item}</li>}</For>\n      </ul>\n      <button onClick={send}>Connect</button>\n      <button onClick={close}>Close</button>\n    </div>\n  );\n};\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"You can also listen for custom events to receive data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { on } = useSSE(postMethodHandler);\n\n// The following code will listen for events with the field `event: update`\nconst offUpdate = on('update', event => {\n  console.log(event.eventSource); // Current EventSource instance\n  console.log(event.data);\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"update"})," event will be triggered when the following data is received:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"event: update\ndata: xxx\n"})}),"\n",(0,a.jsx)(n.h2,{id:"binding-events",children:"Binding Events"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useSSE"})," provides a series of event binding methods, which return unbinding functions when bound."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { onMessage, onError, onOpen, on, close } = useSSE(postMethodHandler);\n\n// Corresponds to the `message` event of EventSource\nconst offMessage = onMessage(event => {\n  console.log(event.eventSource); // Current EventSource instance\n  console.log(event.data);\n});\n\nconst offError = onError(event => {\n  console.log(event.eventSource); // Current EventSource instance\n  console.error('SSE error', event.error);\n  close();\n});\n\n// Unbind events\noffMessage();\noffError();\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can also bind events via chaining."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data, readyState, close } = useSSE(postMethodHandler)\n  .onMessage(event => {\n    console.log(event.eventSource); // Current EventSource instance\n    console.log(event.data);\n  })\n  .onError(event => {\n    console.log(event.eventSource); // Current EventSource instance\n    console.error('SSE error', event.error);\n    close();\n  });\n"})}),"\n",(0,a.jsx)(n.h2,{id:"global-response-interception",children:"Global Response Interception"}),"\n",(0,a.jsxs)(n.p,{children:["By default, response data is captured by the ",(0,a.jsx)(n.a,{href:"/tutorial/getting-started/basic/global-interceptor",children:"Global Response Interceptor"}),". If this is not your intended behavior, you can manually disable it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data, readyState, onMessage, on } = useSSE(postMethodHandler, {\n  // highlight-start\n  interceptByGlobalResponded: false // Now data will not be intercepted\n  // highlight-end\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"reconnection-on-disconnect",children:"Reconnection on Disconnect"}),"\n",(0,a.jsx)(n.p,{children:"When the connection is unexpectedly terminated or the server actively closes it, a reconnection will be triggered after 1 second by default. You can set the reconnection time on either the client or server side."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { data, readyState, onMessage, on } = useSSE(postMethodHandler, {\n  // highlight-start\n  reconnectionTime: 2000 // Reconnection will be triggered after 2 seconds\n  // highlight-end\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you want to disable reconnection when closing the connection, handle it as follows:"}),"\n",(0,a.jsxs)(n.h3,{id:"set-reconnectiontime-to-0",children:["Set ",(0,a.jsx)(n.code,{children:"reconnectionTime"})," to 0"]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"reconnectionTime"})," of 0 disables the reconnection mechanism."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"useSSE(postMethodHandler, {\n  reconnectionTime: 0\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"active-closure-by-client",children:"Active Closure by Client"}),"\n",(0,a.jsxs)(n.p,{children:["Calling the ",(0,a.jsx)(n.code,{children:"close"})," method of ",(0,a.jsx)(n.code,{children:"useSSE"})," will not trigger reconnection. Therefore, you can notify the client to actively close the connection via a custom event."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { close } = useSSE(postMethodHandler).on('close', () => {\n  close();\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"server-side-declaration",children:"Server-Side Declaration"}),"\n",(0,a.jsxs)(n.p,{children:["The server can declare the reconnection time. For example, sending the following data will set the reconnection delay to 5 seconds, overriding the client's ",(0,a.jsx)(n.code,{children:"reconnectionTime"})," setting."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"retry: 5000\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Thus, the server can also send ",(0,a.jsx)(n.code,{children:"retry: 0"})," to notify the client not to reconnect before closing the connection."]}),"\n",(0,a.jsx)(n.h2,{id:"type-declarations",children:"Type Declarations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const enum SSEHookReadyState {\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSED = 2\n};\n\ntype SSEHookConfig = {\n  /**\n   * Passed to `new EventSource`\n   */\n  withCredentials?: boolean;\n\n  /**\n   * Whether to intercept via alova's global responded interceptor\n   * @default true\n   */\n  interceptByGlobalResponded?: boolean;\n\n  /**\n   * Initial data\n   */\n  initialData?: any;\n\n  /**\n   * Whether to send the request immediately\n   * @default false\n   */\n  immediate?: boolean;\n};\n\ntype SSEReturnType<S, Data> = {\n  readyState: ExportedType<SSEHookReadyState, S>;\n  data: ExportedType<Data | undefined, S>;\n  eventSource: ExportedType<EventSource | undefined, S>;\n  /**\n   * Manually send the request. Automatically triggered when `immediate: true` is set.\n   * @param args Request parameters passed to the method\n   */\n  send: (...args: any[]) => Promise<void>;\n  /**\n   * Close the connection\n   */\n  close: () => void;\n  /**\n   * Register a callback for the EventSource `open` event\n   * @param callback Callback function\n   * @returns Unregister function\n   */\n  onOpen(callback: SSEOnOpenTrigger): () => void;\n\n  /**\n   * Register a callback for the EventSource `message` event\n   * @param callback Callback function\n   * @returns Unregister function\n   */\n  onMessage<T = Data>(callback: SSEOnMessageTrigger<T>): () => void;\n\n  /**\n   * Register a callback for the EventSource `error` event\n   * @param callback Callback function\n   * @returns Unregister function\n   */\n  onError(callback: SSEOnErrorTrigger): () => void;\n\n  /**\n   * @param eventName Event name (default: `open` | `error` | `message`)\n   * @param handler Event handler\n   */\n  on(\n    eventName: string,\n    handler: (event: AlovaSSEMessageEvent<S, E, R, T, RC, RE, RH>) => void\n  ) => () => void;\n};\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>o});t(67294);var a=t(90512);const r={tabItem:"tabItem_Ymn6"};var s=t(85893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>y});var a=t(67294),r=t(90512),s=t(12466),o=t(16550),i=t(20469),l=t(91980),c=t(67392),d=t(20812);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function v(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=v({queryString:t,groupId:r}),[g,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),f=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)}),[u,m,s]),tabValues:s}}var m=t(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(85893);function S(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=i[t].value;r!==a&&(c(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,r.Z)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function j(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,b.jsx)(S,{...n,...e}),(0,b.jsx)(x,{...n,...e})]})}function y(e){const n=(0,m.Z)();return(0,b.jsx)(j,{...e,children:u(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var a=t(67294);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);