"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[3114],{78899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>j,frontMatter:()=>p,metadata:()=>v,toc:()=>g});var o=n(85893),a=n(11151),s=n(74866),r=n(85162),i=n(45498),l=n(2274);const d="<template>\n  <div v-if=\"loading\">Loading...</div>\n  <div v-else-if=\"error\">{{ error.message }}</div>\n  <div v-else>\n    <div>Request result: {{ data }}</div>\n    <button @click=\"handleSend\">Manually send request</button>\n    <button @click=\"handleUpdate\">Manually modify data</button>\n  </div>\n</template>\n\n<script setup>\nimport { useRequest } from 'alova/client';\nimport { alovaInstance } from './api';\n\n// Use the alova instance to create a method and pass it to useRequest to send a request\nconst { loading, data, error, send, update } = useRequest(\n  alovaInstance.Get('/todos/1', {\n    cacheFor: 0\n  }),\n  {\n    initialData: {}, // Set the initial data of the data state\n    immediate: true // Whether to send a request immediately, the default is true\n  }\n).onSuccess(event => {\n  event.method; //The method of the current request\n  event.data; //Response data of the current request\n});\n\nconst handleSend = () => {\n  send();\n};\nconst handleUpdate = () => {\n  update({\n    data: { title: 'new title' }\n  });\n\n  // You can also modify the data value directly\n  // data.value = { title: 'new title' };\n};\n<\/script>\n",c="import { useRequest } from 'alova/client';\nimport { alovaInstance } from './api';\n\nconst App = () => {\n  // Use the alova instance to create a method and pass it to useRequest to send a request\n  const { loading, data, error, send, update } = useRequest(\n    alovaInstance.Get('/todos/1', {\n      cacheFor: 0\n    }),\n    {\n      initialData: {}, // Set the initial data of the data state\n      immediate: true // Whether to send the request immediately, the default is true\n    }\n  ).onSuccess(event => {\n    event.method; //The method of the current request\n    event.data; //Response data of the current request\n  });\n\n  const handleSend = () => {\n    send();\n  };\n  const handleUpdate = () => {\n    update({\n      data: { title: 'new title' }\n    });\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  } else if (error) {\n    return <div>{error.message}</div>;\n  }\n  return (\n    <div>\n      <div>Request result: {JSON.stringify(data)}</div>\n      <button onClick={handleSend}>Manually send request</button>\n      <button onClick={handleUpdate}>Manually modify data</button>\n    </div>\n  );\n};\nexport default App;\n",h="<script>\n  import { useRequest } from 'alova/client';\n  import { alovaInstance } from './api';\n\n  // Use the alova instance to create a method and pass it to useRequest to send a request\n  const { loading, data, error, send, update } = useRequest(\n    alovaInstance.Get('/todos/1', {\n      cacheFor: 0\n    }),\n    {\n      initialData: {}, // Set the initial data of the data state\n      immediate: true // Whether to send the request immediately, the default is true\n    }\n  ).onSuccess(event => {\n    event.method; //The method of the current request\n    event.data; //Response data of the current request\n  });\n\n  const handleSend = () => {\n    send();\n  };\n  const handleUpdate = () => {\n    update({\n      data: { title: 'new title' }\n    });\n\n    // You can also modify the data value directly\n    // $data = { title: 'new title' };\n    // data.update(d => ({ title: 'new title' }));\n  };\n<\/script>\n\n{#if $loading}\n<div>Loading...</div>\n{:else if $error}\n<div>{ $error.message }</div>\n{:else}\n<div>\n  <div>Request result: {{ data }}</div>\n  <button on:click=\"{handleSend}\">Manually send request</button>\n  <button on:click=\"{handleUpdate}\">Manually modify data</button>\n</div>\n{/if}\n",u="import { useRequest } from 'alova/client';\nimport { alovaInstance } from './api';\n\nconst App = () => {\n  // Use the alova instance to create a method and pass it to useRequest to send a request\n  const { loading, data, error, send, update } = useRequest(\n    alovaInstance.Get('/todos/1', {\n      cacheFor: 0\n    }),\n    {\n      initialData: {}, // Set the initial data of the data state\n      immediate: true // Whether to send the request immediately, the default is true\n    }\n  ).onSuccess(event => {\n    event.method; //The method of the current request\n    event.data; //Response data of the current request\n  });\n\n  const handleSend = () => {\n    send();\n  };\n  const handleUpdate = () => {\n    update({\n      data: { title: 'new title' }\n    });\n  };\n\n  return (\n    <>\n      {loading() ? (\n        <div>Loading...</div>\n      ) : error() ? (\n        <div>{error().message}</div>\n      ) : (\n        <div>\n          <div>Request result: {JSON.stringify(data)}</div>\n          <button onClick={handleSend}>Manually send request</button>\n          <button onClick={handleUpdate}>Manually modify data</button>\n        </div>\n      )}\n    </>\n  );\n};\nexport default App;\n",p={title:"Combine UI framework"},m=void 0,v={id:"tutorial/getting-started/basic/combine-framework",title:"Combine UI framework",description:"Next, we will learn how to use it in conjunction with the client UI framework, which can allow alova to exert its true power. When used in the UI framework, not only can alova automatically manage the responsive request status, but also automatically control when the request should be sent through certain rules.",source:"@site/docs/tutorial/02-getting-started/03-basic/07-combine-framework.md",sourceDirName:"tutorial/02-getting-started/03-basic",slug:"/tutorial/getting-started/basic/combine-framework",permalink:"/tutorial/getting-started/basic/combine-framework",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/03-basic/07-combine-framework.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Combine UI framework"},sidebar:"tutorial",previous:{title:"Method Metadata",permalink:"/tutorial/getting-started/basic/method-metadata"},next:{title:"Server Usage",permalink:"/tutorial/getting-started/basic/server"}},f={},g=[{value:"Set statesHook",id:"set-stateshook",level:2},{value:"Automatically manage request status",id:"automatically-manage-request-status",level:2},{value:"Submit data",id:"submit-data",level:2},{value:"Process Response",id:"process-response",level:2},{value:"Transform response data",id:"transform-response-data",level:3},{value:"Bind response callback",id:"bind-response-callback",level:3},{value:"End",id:"end",level:2}];function x(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Next, we will learn how to use it in conjunction with the client UI framework, which can allow alova to exert its true power. When used in the UI framework, not only can alova automatically manage the responsive request status, but also automatically control when the request should be sent through certain rules."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"alova"})," provides 15+ client request strategies, which help you implement complex requests in a simple and elegant way. Let's continue to look down!"]}),"\n",(0,o.jsx)(t.h2,{id:"set-stateshook",children:"Set statesHook"}),"\n",(0,o.jsx)(t.p,{children:"Alova's useHook request strategy can run in all UI frameworks supported by Alova. You only need to set the statesHook of the corresponding UI framework on the Alova instance, which will tell Alova which UI framework should be used to create states."}),"\n",(0,o.jsxs)(s.Z,{groupId:"framework",children:[(0,o.jsx)(r.Z,{value:"1",label:"vue",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\nimport VueHook from 'alova/vue';\n\nexport const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  statesHook: VueHook\n  // highlight-end\n});\n"})})}),(0,o.jsx)(r.Z,{value:"2",label:"react",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\nimport ReactHook from 'alova/react';\n\nexport const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  statesHook: ReactHook\n  // highlight-end\n});\n"})})}),(0,o.jsx)(r.Z,{value:"3",label:"svelte",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\nimport SvelteHook from 'alova/svelte';\n\nexport const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  statesHook: SvelteHook\n  // highlight-end\n});\n"})})}),(0,o.jsx)(r.Z,{value:"4",label:"solid",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\nimport SolidHook from 'alova/solid';\n\nexport const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  statesHook: SolidHook\n  // highlight-end\n});\n"})})}),(0,o.jsx)(r.Z,{value:"5",label:"vue-demi",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\nimport VueDemiHook from 'alova/vue-demi';\n\n// support vue@2.7+ composition api\nexport const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  statesHook: VueDemiHook\n  // highlight-end\n});\n"})})})]}),"\n",(0,o.jsx)(t.p,{children:"In addition, alova also provides the following statesHooks:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/resource/framework/vue-options",children:"statesHook for vue options style"}),", which means you can use alova's usehooks in vue2's options style components."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"automatically-manage-request-status",children:"Automatically manage request status"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useRequest"})," is our most commonly used request strategy. It can help us create and maintain responsive states of requests, such as ",(0,o.jsx)(t.code,{children:"loading/data/error"}),", etc. You can use these responsive states directly in the view. When they change, the view will also change accordingly."]}),"\n",(0,o.jsx)(t.p,{children:"useRequest means sending a request. By default, a request will be sent when called."}),"\n",(0,o.jsxs)(s.Z,{groupId:"framework",children:[(0,o.jsx)(r.Z,{value:"1",label:"vue",children:(0,o.jsx)(l.Z,{template:"vue",mainFile:d,editorHeight:400})}),(0,o.jsx)(r.Z,{value:"2",label:"react",children:(0,o.jsx)(l.Z,{template:"react",mainFile:c,editorHeight:400})}),(0,o.jsx)(r.Z,{value:"3",label:"svelte",children:(0,o.jsx)(i.Z,{language:"html",children:h})}),(0,o.jsx)(r.Z,{value:"4",label:"solid",children:(0,o.jsx)(l.Z,{template:"solid",mainFile:u,editorHeight:400})})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsxs)(t.a,{href:"/tutorial/project/best-practice/skills",children:["When to use useRequest and when to send a request via ",(0,o.jsx)(t.code,{children:"await alovaInstance.Get"})]}),"."]}),"\n",(0,o.jsxs)(t.admonition,{title:"useHook usage specification",type:"warning",children:[(0,o.jsxs)(t.p,{children:["Please note that ",(0,o.jsx)(t.code,{children:"useRequest"})," can only be used to send requests within a component. Outside a component, you can send requests directly through a method instance, and the use of ",(0,o.jsx)(t.code,{children:"useRequest"})," must comply with the use hook usage rules, that is, it can only be called at the outermost level of a function."]}),(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"\u274c\u274c\u274c It is not recommended to call it in a loop, conditional judgment, or sub-function"}),". For example, the following example of use in a click callback, when used in a callback function, although the request can be initiated normally, the responsive data returned by the use hook cannot be used in the view, and the same is true for loops and conditional judgments."]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"// \u274c bad\nconst handleClick = () => {\n  const { loading, data } = useRequest(getter);\n};\n\n// -------\n// \u2705 good\nconst { loading, data, send } = useRequest(getter, {\n  immediate: false\n});\nconst handleClick = () => {\n  send();\n};\n"})})]}),"\n",(0,o.jsx)(t.h2,{id:"submit-data",children:"Submit data"}),"\n",(0,o.jsxs)(t.p,{children:["When you need to submit a new todo item, you can first turn off the default send request, switch to manual trigger request, and receive the ",(0,o.jsx)(t.code,{children:"send"})," function in useRequest for manual request sending. The ",(0,o.jsx)(t.code,{children:"send"})," function will return a Promise instance with response data, which will be changed to resolve state after the request response."]}),"\n",(0,o.jsxs)(t.p,{children:["At this time, in order to receive the parameters passed in by the ",(0,o.jsx)(t.code,{children:"send"})," function, you can set the first parameter of ",(0,o.jsx)(t.code,{children:"useRequest"})," to a function, which we call ",(0,o.jsx)(t.strong,{children:"method handler"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const {\n  // ...\n  // Function for manual sender request, send request after calling\n  send: addTodo\n\n  // Parameters of send function will be received here\n} = useRequest(newTodo => alovaInstance.Post('/todo', newTodo), {\n  // When immediate is false, it is not sent by default\n  immediate: false\n});\n\n// Send request manually\nconst handleAddTodo = () => {\n  const newTodo = {\n    title: 'New todo item',\n    time: new Date().toLocaleString()\n  };\n  // The send function returns a Promise object, which can receive response data\n  addTodo(newTodo)\n    .then(result => {\n      console.log('Add todo item successfully, response data is:', result);\n    })\n    .catch(error => {\n      console.log('Add todo item failed, error message is:', error);\n    });\n};\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"send"})," function allows you to freely repeat requests."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["In react, the send function uses the ",(0,o.jsx)(t.code,{children:"useCallback"})," package, and it is not restricted by the closure trap. You can use it directly in the event without worrying about performance problems."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"process-response",children:"Process Response"}),"\n",(0,o.jsx)(t.p,{children:"After the request is completed, the response data will be processed through multiple processes before the final data is obtained at the location where the request was sent. The process is as follows:"}),"\n",(0,o.jsx)(t.mermaid,{value:"flowchart LR\n   classDef condition fill:#a8bcff\n\n   R1[Response successfully] --\x3e global.onSuccess\n   global.onSuccess --\x3e global.onComplete\n   global.onSuccess --\x3e throw{Is an error thrown? }:::condition\n   throw --\x3e|No| method.transform\n   method.transform --\x3e useHook.onSuccess\n   throw --\x3e|Yes| useHook.onError\n\n   method.transform --\x3e throw2{Is an error thrown? }:::condition\n   throw2 --\x3e|No| useHook.onSuccess\n   throw2 --\x3e|Yes| useHook.onError\n\n   useHook.onSuccess --\x3e throw3{Throw an error? }:::condition\n   throw3 --\x3e|Yes| useHook.onError\n\n   R2[Response Error] --\x3e global.onError\n   global.onError --\x3e global.onComplete\n   global.onError --\x3e throw4{Is an error thrown? }:::condition\n   throw4 --\x3e|Yes| useHook.onError\n   throw4 --\x3e|No| method.transform"}),"\n",(0,o.jsx)(t.p,{children:"When no error is thrown, the next node receives the return value of the previous node."}),"\n",(0,o.jsx)(t.h3,{id:"transform-response-data",children:"Transform response data"}),"\n",(0,o.jsxs)(t.p,{children:["In ",(0,o.jsx)(t.a,{href:"/tutorial/getting-started/basic/method",children:"method detailed explanation"}),", we have already learned about ",(0,o.jsx)(t.code,{children:"transform"}),", which is also very useful when used in useHook. It allows useHook's data to receive the transformed data without transform again."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const todoListGetter = alovaInstance.Get('/todo/list', {\n   // The function accepts raw data and response header objects, and requires the transformed data to be returned, which will be assigned to the data state.\n   // Note: rawData is the data filtered by the global response interceptor (if it is set). For the configuration of the response interceptor, please refer to the [Setting the Global Response Interceptor] chapter.\n   transform(rawData, headers) {\n     return rawData.list.map(item => ({\n       ...item,\n       statusText: item.done ? 'Completed' : 'In progress'\n     });\n   }\n});\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const { data } = useRequest(todoListGetter);\nconst { data } = useWatcher(() => todoListGetter, [userInfo]);\n"})}),"\n",(0,o.jsx)(t.p,{children:"The data value will receive the transformed data format."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"type Data = {\n  // ...\n  statusText: 'Completed' | 'In progress';\n}[];\n"})}),"\n",(0,o.jsx)(t.admonition,{title:"note",type:"warning",children:(0,o.jsxs)(t.p,{children:["When used in usehooks, throwing an error in ",(0,o.jsx)(t.code,{children:"transform"})," will also trigger ",(0,o.jsx)(t.code,{children:"onError"}),";"]})}),"\n",(0,o.jsx)(t.h3,{id:"bind-response-callback",children:"Bind response callback"}),"\n",(0,o.jsx)(t.p,{children:"If you need to set a request callback, you can also receive the callback setting function in the return parameter of useHooks, as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const {\n  // ...\n\n  //Successful callback binding\n  onSuccess,\n\n  // Failure callback binding\n  onError,\n\n  // Complete the callback binding, the callback will be called on success or failure\n  onComplete\n} = useRequest(todoListGetter);\nonSuccess(event => {\n  console.log('The request was successful, the response data is:', event.data);\n  console.log('The method instance of this request is:', event.method);\n  console.log('Whether the response data comes from the cache:', event.fromCache);\n});\nonError(event => {\n  console.log('The request failed, the error message is:', event.error);\n  console.log('The method instance of this request is:', event.method);\n});\nonComplete(event => {\n  // event.status is success when it succeeds and error when it fails.\n  console.log('The request is completed, the status is: ', event.status);\n  console.log('The method instance of this request is:', event.method);\n  console.log('Whether the response data comes from the cache:', event.fromCache);\n  if (event.data) {\n    console.log('Request data:', event.data);\n  } else if (event.error) {\n    console.log('Error message:', event.error);\n  }\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:"We also support the chain call of binding functions in all useHooks\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const { data, loading, error, onSuccess, onError, onComplete } = useRequest(todoListGetter)\n  .onSuccess(event => {\n    // ...\n  })\n  .onError(event => {\n    // ...\n  })\n  .onComplete(event => {\n    // ...\n  });\n"})}),"\n",(0,o.jsx)(t.admonition,{title:"Hint",type:"note",children:(0,o.jsxs)(t.p,{children:["Throwing an error in ",(0,o.jsx)(t.code,{children:"onSuccess"})," will trigger ",(0,o.jsx)(t.code,{children:"onError"}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"end",children:"End"}),"\n",(0,o.jsxs)(t.p,{children:["The above is the basic use of our most commonly used ",(0,o.jsx)(t.code,{children:"useRequest"}),". Other commonly used request strategies include:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"useWatcher: monitor data changes and automatically request"}),"\n",(0,o.jsx)(t.li,{children:"useForm: form data submission and management"}),"\n",(0,o.jsx)(t.li,{children:"useAutoRequest: automatically request according to rules such as timed polling, browser focus, network reconnection, etc."}),"\n",(0,o.jsx)(t.li,{children:"..."}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["For complete usage or other client request strategies, please move to ",(0,o.jsx)(t.a,{href:"/tutorial/client/strategy",children:"Client Strategy"})," to view all client request strategies provided by alova."]})]})}function j(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}},2274:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(59020),a=n(73808),s=n(92949),r=n(85893);const i={vue:{root:"/src/App.vue",files:{"/src/api.js":"import { createAlova } from 'alova';\nimport adapterFetch from 'alova/fetch';\nimport VueHook from 'alova/vue';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: VueHook,\n  requestAdapter: adapterFetch(),\n  responded: response => response.json()\n});\n"}},"vue-options":{root:"/src/App.vue",files:{"/src/api.js":"import { VueOptionsHook } from '@alova/vue-options';\nimport { createAlova } from 'alova';\nimport adapterFetch from 'alova/fetch';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: VueOptionsHook,\n  requestAdapter: adapterFetch(),\n  responded: response => response.json()\n});\n"},deps:{"@alova/vue-options":"latest"}},react:{root:"/App.js",files:{"/api.js":"import { createAlova } from 'alova';\nimport adapterFetch from 'alova/fetch';\nimport ReactHook from 'alova/react';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: ReactHook,\n  requestAdapter: adapterFetch(),\n  responded: response => response.json()\n});\n"}},svelte:{root:"/App.svelte",files:{"/api.js":"import { createAlova } from 'alova';\nimport adapterFetch from 'alova/fetch';\nimport SvelteHook from 'alova/svelte';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: SvelteHook,\n  requestAdapter: adapterFetch(),\n  responded: response => response.json()\n});\n"}},solid:{root:"/App.jsx",files:{"/api.js":"import { createAlova } from 'alova';\nimport adapterFetch from 'alova/fetch';\nimport SolidHook from 'alova/solid';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: SolidHook,\n  requestAdapter: adapterFetch(),\n  responded: response => response.json()\n});\n"}},static:{root:"/index.html"},vanilla:{root:"/index.js"}},l={svelte:e=>({files:{"/index.js":{code:'import App from "./App.svelte";    \n  const app = new App({\n    target: document.body\n  });\n  export default app;\n        ',hidden:!0},"/public/index.html":{code:'<!DOCTYPE html>\n  <html>\n    <head>\n      <meta charset="utf8" />\n      <meta name="viewport" content="width=device-width" />\n      <title>Svelte app</title>\n      <link rel="stylesheet" href="public/bundle.css" />\n    </head>\n    <body>\n      <script src="bundle.js"><\/script>\n    </body>\n  </html>',hidden:!0},...e.files},customSetup:{entry:"/index.js",dependencies:{svelte:"^3.59.2",...e.customSetup.dependencies}},main:"/App.svelte",environment:"svelte"}),solid:e=>({files:{"/index.js":{code:'import { render } from "solid-js/web";\nimport App from "./App";\nimport "./styles.css";\nrender(() => App(), document.getElementById("app"));',hidden:!0},"/public/index.html":{code:'<html>\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n<body>\n  <div id="app"></div>\n  <script src="src/index.js"><\/script>\n</body>\n</html>',hidden:!0},...e.files},customSetup:{entry:"/index.js",dependencies:{svelte:"^1.8.19",...e.customSetup.dependencies}},main:"/App.jsx",environment:"solid"})},d=e=>{let{template:t,mainFile:n,externalFiles:d={},containBaseURL:c=!0,containResponded:h=!0,editorHeight:u,style:p}=e;const m={light:a.SF,dark:a.eq},v=i[t+(p?`-${p}`:"")],f={[v.root]:n,...v.files?v.files:{},...d},g=Object.keys(f).find((e=>/api\.js$/.test(e)));f[g]&&(c||(f[g]=f[g].replace(/baseURL.+?\s{4}/,"")),h||(f[g]=f[g].replace(/,\s+responded.+json\(\)/,"")));const x={alova:"latest",...v.deps||{}},{colorMode:j}=(0,s.I)();let b={files:f,template:t,customSetup:{dependencies:x}};return b=l[t]?l[t](b):b,(0,r.jsx)(o.xR,{...b,theme:m[j],options:{editorWidthPercentage:70,editorHeight:u}})}}}]);